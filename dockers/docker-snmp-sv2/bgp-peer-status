#!/usr/bin/env python

# This is to trap BGP peer status change, and report to redis APPL_DB like this
# {"BGP_NEIGHBOR":{"192.168.10.9": {"peer_status": "Idel"}}}
#
# As bgp peer trap bug(https://github.com/FRRouting/frr/issues/4840), we have to get status by snmp get
# As there is no peer add/del trap, so we have to do this work in FRR container.


import sys
import json
import syslog
import re
import subprocess

from swsssdk import SonicV2Connector

REDIS_HOSTIP = "127.0.0.1"

appDbConnector = SonicV2Connector(host=REDIS_HOSTIP)
appDbConnector.connect("APPL_DB")

def setDbPeerStatus(peerRemoteAddr, status):
    key = 'BGP_NEIGHBOR:' + peerRemoteAddr
    syslog.syslog(syslog.LOG_INFO, '[bgp-peer-status] setDbPeerStatus: key = {}, status = {}'.format(key, status))
    if status == "Delete":
        appDbConnector.delete('APPL_DB', key)
    else:
        appDbConnector.set('APPL_DB', key, 'peer_status', status)

def runCommand(command):
    #syslog.syslog(syslog.LOG_INFO, 'cmd: {}'.format(command))
    child = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    ret, err = child.communicate()
    if err == None or err == '':
        return ret
    else:
        #syslog.syslog(syslog.LOG_ERR, 'err: {}'.format(err))
        return ""

def getRealPeerStatus(peerRemoteAddr):
    peerMib = '1.3.6.1.2.1.15.3.1.2.' + peerRemoteAddr
    command = ['snmpwalk', '-v', '2c', '-c', 'snmp@sankuai', 'localhost', '1.3.6.1.2.1.15.3.1.2']
    ret = runCommand(command)
    pos = re.search(" = INTEGER: ", ret)
    if pos:
        pos = pos.span()[1]
    else:
        return "Delete"

    ret = ret[pos]
    if ret == "1":
        return "Idel"
    elif ret == "2":
        return "Connect"
    elif ret == "3":
        return "Active"
    elif ret == "4":
        return "Opensent"
    elif ret == "5":
        return "Openconfirm"
    elif ret == "6":
        return "Established"
    else:
        return "Unknown"

def readBgpNeighborConfig(peerRemoteAddr):
    key = 'BGP_NEIGHBOR:' + peerRemoteAddr
    return appDbConnector.get_all('APPL_DB', key)

def main():
    peerIp = ""
    needSet = False

    # get stdin
    lines = sys.stdin.readlines()
    # lines = ['localhost\n', 'UDP: [127.0.0.1]:34916->[127.0.0.1]:162\n', 'iso.3.6.1.2.1.1.3.0 0:23:25:11.07\n', 'iso.3.6.1.6.3.1.1.4.1.0 iso.3.6.1.2.1.15.0.1\n', 'iso.3.6.1.2.1.15.3.1.14.192.168.10.9 "06 02 "\n', 'iso.3.6.1.2.1.15.3.1.2.192.168.10.9 6\n', 'iso.3.6.1.6.3.18.1.3.0 172.18.8.212\n', 'iso.3.6.1.6.3.18.1.4.0 "public"\n', 'iso.3.6.1.6.3.1.1.4.3.0 iso.3.6.1.2.1.15\n']
    # iso.3.6.1.2.1.15.3.1.14
    for line in lines:
        if re.search("iso.3.6.1.2.1.15.3.1.14.", line):
            startPos = 24
            endPos = line.find(' ')
            if endPos != -1:
                peerIp = line[startPos:endPos]
                break

    if peerIp == "":
        return -1

    newStatus = getRealPeerStatus(peerIp)

    # read config
    sonicCfgJson = readBgpNeighborConfig(peerIp)
    if sonicCfgJson:
        for (k, v) in sonicCfgJson.items():
            if k == "peer_status":
                oldStatus = v
                if newStatus != oldStatus:
                    needSet = True

    if needSet:
        setDbPeerStatus(peerIp, newStatus)
        return 1
    else:
        return 2

if __name__ == '__main__':
    main()